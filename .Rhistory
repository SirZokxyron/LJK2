n = 10
confint.length = function(beta_pourc) {
beta = alpha * beta_pourc
return(- qnorm(beta)*ro/sqrt(n) + qnorm(1-alpha+beta)*ro/sqrt(n))
}
x = seq(0, 1, 0.01)
y = lapply(x, confint.length)
plot(x, y, type="l", main="taille de l'intervalle de confiance en fonction de beta", xlab="taille de l'intervalle", ylab="beta = pourcentage de alpha")
alpha = 0.95
ro = 1
n = 10
confint.length = function(beta_pourc) {
beta = alpha * beta_pourc
return(- qnorm(beta)*ro/sqrt(n) + qnorm(1-alpha+beta)*ro/sqrt(n))
}
x = seq(0, 1, 0.01)
y = lapply(x, confint.length)
plot(x, y, type="l", main="taille de l'intervalle de confiance en fonction de beta", ylab="taille de l'intervalle", xlab="beta = pourcentage de alpha")
alpha = 0.95
ro = 1
n = 10
confint.length = function(beta_pourc) {
beta = alpha * beta_pourc
return(- qnorm(beta)*ro/sqrt(n) + qnorm(1-alpha+beta)*ro/sqrt(n))
}
x = seq(0, 1, 0.01)
y = lapply(x, confint.length)
plot(x, y, type="l", main="taille de l'intervalle de confiance en fonction de beta", ylab="taille de l'intervalle", xlab="beta = pourcentage de alpha")
confint.exponentielle(10, 10, 37, .1)
confint.normale(100, 100, 5, 37, 0.5)
confint.normale = function(N, n, mu, ro, alpha) {
M = matrix(0, N, n)
for(i in 1:N) {
M[i,] = rnorm(n, mu, ro^2)
}
I = matrix(0, N, 2)
for(i in 1:N) {
Xn = sum(M[i,])/n
Sp = sqrt(var(M[i,]))
t = qt(1-alpha/2, n-1)
I[i,] = c(Xn - t * Sp/sqrt(n), Xn + t * Sp/sqrt(n))
}
y = matrix(0, N, 2)
for(i in 1:N) {
y[i,] = c(i, i)
}
matplot(t(I), t(y), type='l', col="blue")
abline(v=mu, col="red")
hit = 0
for(i in 1:N) {
if(I[i,1] <= mu & mu <= I[i,2]) {
hit = hit + 1
}
}
return(hit/N)
}
confint.normale(10, 10, 3, 37, 0.5)
confint.normale(10, 10, 5, 37, 0.1)
confint.normale(100, 100, 5, 37, 0.5)
confint.exponentielle = function(N, n, gamma, alpha) {
M = matrix(0, N, n)
for(i in 1:N) {
M[i,] = rgamma(n, gamma)
}
I = matrix(0, N, 2)
for(i in 1:N) {
Xn = sum(M[i,])/n
Sp = sqrt(var(M[i,]))
t = qnorm(1-alpha/2)
I[i,] = c(Xn - t * Sp/sqrt(n), Xn + t * Sp/sqrt(n))
}
y = matrix(0, N, 2)
for(i in 1:N) {
y[i,] = c(i, i)
}
matplot(t(I), t(y), type='l', col="blue")
abline(v=gamma, col="red")
hit = 0
for(i in 1:N) {
if(I[i,1] <= gamma & gamma <= I[i,2]) {
hit = hit + 1
}
}
return(hit/N)
}
confint.exponentielle(10, 10, 37, .5)
confint.exponentielle(10, 10, 37, .1)
confint.normale(100, 100, 5, 37, 0.5)
alpha = 0.95
ro = 1
n = 10
confint.length = function(beta_pourc) {
beta = alpha * beta_pourc
return(- qnorm(beta)*ro/sqrt(n) + qnorm(1-alpha+beta)*ro/sqrt(n))
}
x = seq(0, 1, 0.01)
y = lapply(x, confint.length)
plot(x, y, type="l", main="taille de l'intervalle de confiance en fonction de beta", ylab="taille de l'intervalle", xlab="beta = pourcentage de alpha")
confint.normale(100, 100, 5, 37, 0.5)
confint.normale(1000, 1000, 5, 37, 0.5)
confint.normale(1000, 1000, 5, 37, 0.6)
confint.normale(1000, 1000, 5, 37, 0.4)
confint.normale(1000, 1000, 5, 37, 0.5)
confint.normale(1000, 1000, 5, 37, 0.5)
confint.normale(1000, 1000, 5, 37, 0.75)
confint.exponentielle(1000, 1000, 5, 37, 0.75)
confint.exponentielle(1000, 1000, 37, 0.75)
confint.normale = function(N, n, mu, ro, alpha) {
M = matrix(0, N, n)
for(i in 1:N) {
M[i,] = rnorm(n, mu, ro^2)
}
I = matrix(0, N, 2)
for(i in 1:N) {
Xn = sum(M[i,])/n
Sp = sqrt(var(M[i,]))
t = qt(1-alpha/2, n-1)
I[i,] = c(Xn - t * Sp/sqrt(n), Xn + t * Sp/sqrt(n))
}
y = matrix(0, N, 2)
for(i in 1:N) {
y[i,] = c(i, i)
}
matplot(t(I), t(y), type='l', col="blue")
abline(v=mu, col="red")
hit = 0
for(i in 1:N) {
if(I[i,1] <= mu & mu <= I[i,2]) {
hit = hit + 1
}
}
return(hit/N)
}
confint.normale(10, 10, 3, 37, 0.5)
confint.normale(10, 10, 5, 37, 0.1)
confint.normale(1000, 1000, 5, 37, 0.4)
confint.exponentielle = function(N, n, gamma, alpha) {
M = matrix(0, N, n)
for(i in 1:N) {
M[i,] = rgamma(n, gamma)
}
I = matrix(0, N, 2)
for(i in 1:N) {
Xn = sum(M[i,])/n
Sp = sqrt(var(M[i,]))
t = qnorm(1-alpha/2)
I[i,] = c(Xn - t * Sp/sqrt(n), Xn + t * Sp/sqrt(n))
}
y = matrix(0, N, 2)
for(i in 1:N) {
y[i,] = c(i, i)
}
matplot(t(I), t(y), type='l', col="blue")
abline(v=gamma, col="red")
hit = 0
for(i in 1:N) {
if(I[i,1] <= gamma & gamma <= I[i,2]) {
hit = hit + 1
}
}
return(hit/N)
}
confint.exponentielle(10, 10, 37, .5)
confint.exponentielle(10, 10, 37, .1)
confint.exponentielle(1000, 1000, 37, 0.75)
alpha = 0.95
ro = 1
n = 10
confint.length = function(beta_pourc) {
beta = alpha * beta_pourc
return(- qnorm(beta)*ro/sqrt(n) + qnorm(1-alpha+beta)*ro/sqrt(n))
}
x = seq(0, 1, 0.01)
y = lapply(x, confint.length)
plot(x, y, type="l", main="taille de l'intervalle de confiance en fonction de beta", ylab="taille de l'intervalle", xlab="beta = pourcentage de alpha")
q()
# Shiny
source("map.R")
if(!(exists("ui"))){
# on crée l'ui pour l'app shiny
ui <- fluidPage(
# On affiche le titre
titlePanel("Déchetterie"),
# On affiche sur un côté :
sidebarLayout(
sidebarPanel(
# On met un bouton contour qui demande à l'utilisateur quel contour il veut
selectInput("contour",
label = "Quel type d'information",
choices = c("Densité par Commune",
"Densité par Département",
"Densité par Région",
"Heatmap des Distances",
"Heatmap des Déchetteries"),
selected = "Densité par Département",),
# Représente le choix des années pour la densité
# selectionner les années dans les densitées afin de les affichers
checkboxGroupInput("deche",
label = "Type de Dechetteries sélectionnée",
choices = c("Ressourceries" = "1","Dechetteries" = "2","Recycleries" = "4"),
selected = c("1","2","4")),
# Pour sélectionner la couleur de la carte
selectInput("couleur",
label = "Couleur",
choices = c("Viridis",
"Spectre des Couleurs",
"Inferno",
"Glacier",
"Rose",
"Classique"),
selected = "Classique"),
),
# Sur le panel de base
mainPanel(
# On affiche la map
leafletOutput("map")
)
)
)
}
if(!(exists("server"))){
# On crée un server pour réagir à l'ui
server <- function(input, output) {
# On affiche la map
output$map <- renderLeaflet({
# On change de zones quand on choisit une autre zone
zone = switch(input$contour,
"Densité par Département" = noms_departements,
"Densité par Région" = noms_regions)
# On change de contour quand on change de zone
cont = switch(input$contour,
"Densité par Commune" = france , # Mettre la france à la place
"Densité par Département" = departements,
"Densité par Région" = regions,
"Heatmap des Distances" = france,
"Heatmap des Déchetteries" = france)
# On change de densité quand on change de zone et qu'on change d'année de densité
densit = switch(input$contour,
"Densité par Commune" = dc,
"Densité par Département" = dd,
"Densité par Région" = dr)
# On change de couleur quand on change la couleur
col = switch(input$couleur,
"Viridis" = v,
"Spectre des Couleurs" = spectre,
"Inferno" = enfer,
"Rose" = rose,
"Glacier" = glacier,
"Classique" = classique)
# On change la couleur des points quand on change la couleur générale
col_point = switch(input$couleur,
"Viridis" = "red",
"Spectre des Couleurs" = "purple",
"Inferno" = "blue",
"Rose" = "green",
"Glacier" = "red",
"Classique" = "blue")
choixdech = sum(as.integer(input$deche))
choixdech
r = switch(choixdech,
"1" = r_rs,
"2" = r_dech,
"3" = r_rsd,
"4" = r_rc,
"5" = r_rcs,
"6" = r_rcd,
"7" = r_all)
points_s = switch(choixdech,
"1" = points[points$Type == "Ressourcerie",],
"2" = points[points$Type == "Déchetterie",],
"3" = points[points$Type != "Recyclerie",],
"4" = points[points$Type == "Recyclerie",],
"5" = points[points$Type != "Déchetterie",],
"6" = points[points$Type != "Ressourcerie",],
"7" = points)
# On affiche la map avec tous les changements
mapp = switch(input$contour,
"Densité par Commune" = mapping_communes(rcom,col,points_s,col_point),
"Densité par Département" =  mapping(cont, zone, densit, col, points_s, col_point),
"Densité par Région" =  mapping(cont, zone, densit, col, points_s, col_point),
"Heatmap des Distances" = mapping_dist(r_dist,col),
"Heatmap des Déchetteries" = mapping_dechetterie(r,col))
})
}
}
# On affiche l'application avec l'ui et le server
shinyApp(ui, server)
setwd("~/GitHub/LJK2")
# Shiny
source("map.R")
if(!(exists("ui"))){
# on crée l'ui pour l'app shiny
ui <- fluidPage(
# On affiche le titre
titlePanel("Déchetterie"),
# On affiche sur un côté :
sidebarLayout(
sidebarPanel(
# On met un bouton contour qui demande à l'utilisateur quel contour il veut
selectInput("contour",
label = "Quel type d'information",
choices = c("Densité par Commune",
"Densité par Département",
"Densité par Région",
"Heatmap des Distances",
"Heatmap des Déchetteries"),
selected = "Densité par Département",),
# Représente le choix des années pour la densité
# selectionner les années dans les densitées afin de les affichers
checkboxGroupInput("deche",
label = "Type de Dechetteries sélectionnée",
choices = c("Ressourceries" = "1","Dechetteries" = "2","Recycleries" = "4"),
selected = c("1","2","4")),
# Pour sélectionner la couleur de la carte
selectInput("couleur",
label = "Couleur",
choices = c("Viridis",
"Spectre des Couleurs",
"Inferno",
"Glacier",
"Rose",
"Classique"),
selected = "Classique"),
),
# Sur le panel de base
mainPanel(
# On affiche la map
leafletOutput("map")
)
)
)
}
if(!(exists("server"))){
# On crée un server pour réagir à l'ui
server <- function(input, output) {
# On affiche la map
output$map <- renderLeaflet({
# On change de zones quand on choisit une autre zone
zone = switch(input$contour,
"Densité par Département" = noms_departements,
"Densité par Région" = noms_regions)
# On change de contour quand on change de zone
cont = switch(input$contour,
"Densité par Commune" = france , # Mettre la france à la place
"Densité par Département" = departements,
"Densité par Région" = regions,
"Heatmap des Distances" = france,
"Heatmap des Déchetteries" = france)
# On change de densité quand on change de zone et qu'on change d'année de densité
densit = switch(input$contour,
"Densité par Commune" = dc,
"Densité par Département" = dd,
"Densité par Région" = dr)
# On change de couleur quand on change la couleur
col = switch(input$couleur,
"Viridis" = v,
"Spectre des Couleurs" = spectre,
"Inferno" = enfer,
"Rose" = rose,
"Glacier" = glacier,
"Classique" = classique)
# On change la couleur des points quand on change la couleur générale
col_point = switch(input$couleur,
"Viridis" = "red",
"Spectre des Couleurs" = "purple",
"Inferno" = "blue",
"Rose" = "green",
"Glacier" = "red",
"Classique" = "blue")
choixdech = sum(as.integer(input$deche))
choixdech
r = switch(choixdech,
"1" = r_rs,
"2" = r_dech,
"3" = r_rsd,
"4" = r_rc,
"5" = r_rcs,
"6" = r_rcd,
"7" = r_all)
points_s = switch(choixdech,
"1" = points[points$Type == "Ressourcerie",],
"2" = points[points$Type == "Déchetterie",],
"3" = points[points$Type != "Recyclerie",],
"4" = points[points$Type == "Recyclerie",],
"5" = points[points$Type != "Déchetterie",],
"6" = points[points$Type != "Ressourcerie",],
"7" = points)
# On affiche la map avec tous les changements
mapp = switch(input$contour,
"Densité par Commune" = mapping_communes(rcom,col,points_s,col_point),
"Densité par Département" =  mapping(cont, zone, densit, col, points_s, col_point),
"Densité par Région" =  mapping(cont, zone, densit, col, points_s, col_point),
"Heatmap des Distances" = mapping_dist(r_dist,col),
"Heatmap des Déchetteries" = mapping_dechetterie(r,col))
})
}
}
# On affiche l'application avec l'ui et le server
shinyApp(ui, server)
3
3
# Shiny
source("map.R")
if(!(exists("ui"))){
# on crée l'ui pour l'app shiny
ui <- fluidPage(
# On affiche le titre
titlePanel("Déchetterie"),
# On affiche sur un côté :
sidebarLayout(
sidebarPanel(
# On met un bouton contour qui demande à l'utilisateur quel contour il veut
selectInput("contour",
label = "Quel type d'information",
choices = c("Densité par Commune",
"Densité par Département",
"Densité par Région",
"Heatmap des Distances",
"Heatmap des Déchetteries"),
selected = "Densité par Département",),
# Représente le choix des années pour la densité
# selectionner les années dans les densitées afin de les affichers
checkboxGroupInput("deche",
label = "Type de Dechetteries sélectionnée",
choices = c("Ressourceries" = "1","Dechetteries" = "2","Recycleries" = "4"),
selected = c("1","2","4")),
# Pour sélectionner la couleur de la carte
selectInput("couleur",
label = "Couleur",
choices = c("Viridis",
"Spectre des Couleurs",
"Inferno",
"Glacier",
"Rose",
"Classique"),
selected = "Classique"),
),
# Sur le panel de base
mainPanel(
# On affiche la map
leafletOutput("map")
)
)
)
}
if(!(exists("server"))){
# On crée un server pour réagir à l'ui
server <- function(input, output) {
# On affiche la map
output$map <- renderLeaflet({
# On change de zones quand on choisit une autre zone
zone = switch(input$contour,
"Densité par Département" = noms_departements,
"Densité par Région" = noms_regions)
# On change de contour quand on change de zone
cont = switch(input$contour,
"Densité par Commune" = france , # Mettre la france à la place
"Densité par Département" = departements,
"Densité par Région" = regions,
"Heatmap des Distances" = france,
"Heatmap des Déchetteries" = france)
# On change de densité quand on change de zone et qu'on change d'année de densité
densit = switch(input$contour,
"Densité par Commune" = dc,
"Densité par Département" = dd,
"Densité par Région" = dr)
# On change de couleur quand on change la couleur
col = switch(input$couleur,
"Viridis" = v,
"Spectre des Couleurs" = spectre,
"Inferno" = enfer,
"Rose" = rose,
"Glacier" = glacier,
"Classique" = classique)
# On change la couleur des points quand on change la couleur générale
col_point = switch(input$couleur,
"Viridis" = "red",
"Spectre des Couleurs" = "purple",
"Inferno" = "blue",
"Rose" = "green",
"Glacier" = "red",
"Classique" = "blue")
choixdech = sum(as.integer(input$deche))
choixdech
r = switch(choixdech,
"1" = r_rs,
"2" = r_dech,
"3" = r_rsd,
"4" = r_rc,
"5" = r_rcs,
"6" = r_rcd,
"7" = r_all)
points_s = switch(choixdech,
"1" = points[points$Type == "Ressourcerie",],
"2" = points[points$Type == "Déchetterie",],
"3" = points[points$Type != "Recyclerie",],
"4" = points[points$Type == "Recyclerie",],
"5" = points[points$Type != "Déchetterie",],
"6" = points[points$Type != "Ressourcerie",],
"7" = points)
# On affiche la map avec tous les changements
mapp = switch(input$contour,
"Densité par Commune" = mapping_communes(rcom,col,points_s,col_point),
"Densité par Département" =  mapping(cont, zone, densit, col, points_s, col_point),
"Densité par Région" =  mapping(cont, zone, densit, col, points_s, col_point),
"Heatmap des Distances" = mapping_dist(r_dist,col),
"Heatmap des Déchetteries" = mapping_dechetterie(r,col))
})
}
}
# On affiche l'application avec l'ui et le server
shinyApp(ui, server)
